/**
 * API: Utilities
 * -----------------------------------------------------------------------------
 * Functions to build utility stylesheets.
 *
 */
const path = require('path')

const getDesignConfig = require('../helpers/get-design-config')

/**
 * Set variables.
 */
const config = getDesignConfig()

/**
 * Build variables stylesheet content.
 * @param {Object} variables - Converted variables object.
 * @param {Object} stylesheet - Stylesheet object.
 * @returns {String}
 */
function buildStyles(variables, stylesheet) {
  let folder = stylesheet.path
    .split(path.sep)
    .reverse()[0]

  folder = `${folder.slice(0, 1).toUpperCase()}${folder.slice(1)}`
  folder = folder.slice(-1) === 's' ? folder.slice(0, -1) : folder

  let content = `/**\n * ${folder}: ${stylesheet.name}\n * -----------------------------------------------------------------------------\n * Automatically generated by \`design\` command, do not edit.\n *\n */\n`
  content += '// stylelint-disable\n\n'

  content += getStylesTemplate(variables, stylesheet)
  return content
}

/**
 * Generates utilities stylesheet.
 * @param {Object} variables - Converted variables object.
 * @param {Object} stylesheet - Stylesheet object.
 * @returns {String}
 */
function getStylesTemplate(variables, stylesheet) {
  let content = ''
  const values = variables[stylesheet.variable]

  /**
   * Output utility classes for mobile.
   */
  values.forEach((value, index) => {
    const last = index + 1 === values.length
    content += buildDeclarations(value, stylesheet, { last })
  })

  /**
   * Output utility classes for desktop.
   */
  content += `\n@include mq($from: ${config.breakpoint.desktop}) {\n`

  values.forEach((value, index) => {
    const last = index + 1 === values.length

    content += `${buildDeclarations(value, stylesheet, {
      last,
      padding: '  ',
      suffix: '-desktop',
    })}`
  })

  content += `}\n`

  return content
}

/**
 * Build declarations for each variable.
 * @param {Object} variable - Variable object.
 * @param {Object} stylesheet - Stylesheet object.
 * @param {Boolean} config.last - Last value in variable.
 * @param {String} config.padding - Line padding.
 * @param {String} config.suffix - Class suffix (for responsive classes).
 * @returns {String}
 */
function buildDeclarations(variable, stylesheet, { last, padding = '', suffix = '' } = {}) {
  const declarations = stylesheet.classes.map((classObject) => {
    const properties = classObject.properties.map((property) => {
      return `${property}: var(${variable.variable});`
    })

    return `${padding}.${classObject.prefix}-${variable.name}${suffix} { ${properties.join(' ')} }\n`
  })

  return `${declarations.join('')}${last ? '' : '\n'}`
}

/**
 * Export API.
 */
module.exports = {
  buildStyles,
}
