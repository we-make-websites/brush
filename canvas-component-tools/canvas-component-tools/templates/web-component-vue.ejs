/**
 * Web component: <%= name %> (<%= handle %>)
 * -----------------------------------------------------------------------------
 * <%= description %>
 *
 */
/* eslint no-unused-vars: ['error', { 'argsIgnorePattern': 'component' }] */
import './<%= handle %>.scss'

import { vueReady } from '~/core/runners'
import * as helpers from '~/helpers/web-components'

/**
 * DOM selectors.
 */
const selectors = {
  example: '[js-<%= handle %>="example"]',
}

/**
 * Create new <<%= handle %>> custom element.
 */
class <%= namePascalCase %> extends HTMLElement {
  static observedAttributes = []

  data(component) {
    return {
      selectors: {
        example: component.querySelector(selectors.example),
      },
    }
  }

  computed(component) {
    return {
      // Computed property
    }
  }

  watch(component) {
    return {
      // Watch function (newValue, oldValue)
    }
  }

  /**
   * Component before mount.
   * - Always call super first in constructor.
   */
  constructor() {
    super()
    this.$data = this.data(this)
    helpers.buildAttributes(this)
    helpers.buildComputed(this)
    helpers.buildWatch(this)
  }

  /**
   * Component mounted.
   */
  connectedCallback() {
    this.setEventListeners()
  }

  /**
   * Set event listeners.
   * - Must pass 'this' as argument for function to have access.
   */
  setEventListeners() {
    this.$data.selectors.example.addEventListener('click', () => {
      this.handleClick(this)
    })
  }
}

/**
 * Define web component on Vue initialisation.
 */
vueReady(() => {
  if (customElements.get('<%= handle %>')) {
    return
  }

  customElements.define('<%= handle %>', <%= namePascalCase %>)
})
